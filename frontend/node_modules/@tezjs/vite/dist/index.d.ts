import { Plugin, UserConfig } from 'vite';

declare function tez(): Plugin;

declare function tzServer(): void;

interface BuildConfig$1 {
    mode?: string;
    rootDir?: string;
    configOnly?: boolean;
}

declare function build(config?: BuildConfig$1): Promise<UserConfig>;

declare function dev(config?: {
    isSsr?: boolean;
}): Promise<Record<string, any>>;

interface Express {
    path: string;
}

interface ImageTransform {
    enableWebPConversion?: boolean;
}

interface MetaTag {
    name?: {
        [key: string]: any;
    };
    property?: {
        [key: string]: any;
    };
}

interface TezSeo {
    title?: string;
    canonical?: string;
    metaTag?: MetaTag;
    linkingData?: string;
}

interface Sitemap {
    changeFrequency?: string;
    priority?: number;
    lastModified?: Date;
}

declare type TypedFunc = (url?: string) => any | Promise<any>;
interface Component {
    name: string;
    slotName?: string;
    data?: string | TypedFunc | {
        [key: string]: any;
    } | Array<{
        [key: string]: any;
    }>;
}

interface PageRedirect {
    from: string;
    statusCode: number;
}

interface Page {
    url: string;
    masterPageName?: string;
    seo?: TezSeo;
    components: Component[];
    redirectRoutes?: PageRedirect[];
    sitemap?: Sitemap;
}

interface CollectionResultQueryConfig {
    entity: string;
    query: {
        [key: string]: any;
    };
}

interface PayloadGenratorConfig {
    routePath: string;
    redirectRoute: any;
    sitemap: any;
    globWriter: any;
    pathResolver: any;
    pageRoute: any;
}

interface MediaConfig {
    uris: Array<string>;
    cdnUri?: string;
}

interface SourcePaginationByUrl {
    url: string;
    components?: string[];
}

interface OptimizationConfig {
    sourcePagination: boolean;
    sourcePaginationByUrl?: SourcePaginationByUrl[];
}

interface PageFieldNameConfig {
    uri: string;
    title: string;
}

interface PageCollectionConfig {
    name: string;
    fieldName: PageFieldNameConfig;
}

interface PaginationConfig {
    pageSize: number;
}

interface RobotsConfig {
    environmentName: string;
}

interface SerializeJsonConfig {
    isCamelCase: boolean;
}

interface UserCredential {
    identifier: string;
    password: string;
}

interface StrapiModuleConfig {
    customPayloadGenerator?: (config: PayloadGenratorConfig) => Promise<void>;
    version?: number;
    apiUri?: string;
    isDev?: boolean;
    payloadRootPath?: string;
    componentNames?: {
        [key: string]: string;
    } | Array<string>;
    pageCollectionConfig?: PageCollectionConfig;
    media?: MediaConfig;
    ignoreColumns?: Array<string>;
    collectionQuery?: CollectionResultQueryConfig;
    componentDataFieldSelectors?: {
        [key: string]: any;
    };
    limit?: number;
    siteUrl?: string;
    serializeJson?: SerializeJsonConfig;
    userCredential?: UserCredential;
    enableInternationalization?: boolean;
    optimization?: OptimizationConfig;
    pagination?: PaginationConfig;
    robots?: RobotsConfig;
}

interface ScriptTag {
    src: string;
}

interface StyleTag {
    href: string;
}

interface BodyTag {
    inlineScript?: Array<{
        name: string;
        code: string;
    }>;
    script?: Array<ScriptTag>;
    style?: Array<StyleTag>;
}

interface Head extends TezSeo {
    inlineStyle?: Array<{
        name: string;
        code: string;
    }>;
    inlineScript?: Array<{
        name: string;
        code: string;
    }>;
    favicon?: string;
    preloads?: Array<{
        path: string;
        type?: string;
    }>;
    script?: Array<ScriptTag>;
    style?: Array<StyleTag>;
    preConnect?: Array<string>;
    preFetchDns?: Array<string>;
    preFetch?: Array<string>;
    links?: Array<{
        [key: string]: string;
    }>;
    handler?: {
        preloads?: (url: string, pagePayload: any) => Array<{
            path: string;
            type?: string;
        }>;
    };
}

interface HtmlPage {
    head?: Head;
    lang?: string;
    body?: BodyTag;
}

interface ClientConfig {
    imports?: string[];
    loaderImage?: string;
    preCache?: {
        route?: boolean | RegExp;
    };
}

interface DataSanitizer {
    toPass?(url: string, componentName: string, parentComponentName: string): boolean;
    sanitizer: Function;
}

interface PageConfig {
    maxPreLoadComponent: number;
    dataSanitizers?: DataSanitizer[];
    htmlSanitizer?(htmlCollection: string[]): string[];
}

interface PayloadConfig {
    page: PageConfig;
    entityQueryParams?: {
        [key: string]: [key: any];
    };
}

declare class DeploymentConfig {
    firebase?: {
        [key: string]: any;
    } | Boolean;
    amplify?: {
        [key: string]: any;
    } | Boolean;
}

interface BuildConfig {
    inLineJs?: boolean;
    inLineCss?: boolean;
    bundleCss?: boolean;
    minifyHtml?: boolean;
    inlineFontCss?: Array<string>;
}

interface TezModuleConfig {
    payload(config: PayloadGenratorConfig): Promise<{
        [key: string]: {
            components: Array<{
                slotName: string;
                data: any;
            }>;
            layoutName: string;
            head: HtmlPage;
        };
    } | null>;
}

interface GenerateConfig {
    sitemap?: boolean;
    robots?: boolean;
    serviceWorker?: boolean;
}

interface ServiceWorkerCacheRule {
    immutable?: {
        images?: boolean;
    };
    originCacheRules?: RegExp[];
}

interface PwaConfig {
    config?: {
        [key: string]: any;
    };
    cache?: ServiceWorkerCacheRule;
    htmlElementConfig?: {
        appleTouchIcon: {
            sizes: string;
            href: string;
        };
        themeColor: string;
    };
}

interface TezConfig {
    generate?: GenerateConfig;
    sourceCodePath?: string;
    spa?: boolean;
    viteOptions?: any;
    payloadPath?: string;
    strapi?: boolean | StrapiModuleConfig;
    express?: Express;
    pwa?: PwaConfig | boolean;
    pwaConfigPath?: string;
    image?: ImageTransform;
    pages?: Page[];
    robots?: {
        [key: string]: string;
    };
    envName?: string;
    htmlMeta?: HtmlPage;
    client?: ClientConfig;
    payload?: PayloadConfig;
    deployment?: DeploymentConfig;
    build?: BuildConfig;
    modules?: TezModuleConfig[];
}

interface BuildOptions {
    mode: string;
    rootDir: string;
    port: number;
    commandName: string;
    buildVersion: number;
}

declare function defineTezConfig(config: TezConfig | ((buildOptions?: BuildOptions) => TezConfig | Promise<TezConfig>)): TezConfig | ((buildOptions?: BuildOptions) => TezConfig | Promise<TezConfig>);

export { build, defineTezConfig, dev, tez, tzServer };
