'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const common = require('@tezjs/common');
const mri = require('mri');
const tez = require('@tezjs/vite');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    const n = Object.create(null);
    if (e) {
        for (const k in e) {
            n[k] = e[k];
        }
    }
    n["default"] = e;
    return n;
}

const mri__default = /*#__PURE__*/_interopDefaultLegacy(mri);
const tez__namespace = /*#__PURE__*/_interopNamespace(tez);

async function buildCommand() {
  tez__namespace.build();
}

async function devCommand() {
  tez__namespace.tzServer();
}

const COMMANDS = {
  "dev": devCommand,
  "build": buildCommand
};

async function runCommand() {
  const args = mri__default(process.argv.slice(2), {
    boolean: [
      "no-clear"
    ]
  });
  const baseArguments = args._;
  const commandName = baseArguments.shift();
  let rootPath = baseArguments.length > 0 ? common.getPath([process.cwd(), baseArguments.pop()], false) : process.cwd();
  common.commonContainer.buildOptions = { buildVersion: common.convertDateToTicks(new Date()), mode: args.mode === "dev" ? "" : args.mode, rootDir: rootPath, port: args.port || 3e3, commandName };
  if (COMMANDS[commandName]) {
    COMMANDS[commandName]();
  }
}

function main() {
  runCommand().then((t) => {
  });
}

exports.main = main;
