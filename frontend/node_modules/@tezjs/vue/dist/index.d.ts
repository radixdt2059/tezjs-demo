import { DefineComponent } from 'vue';

interface ClientConfig {
    imports?: string[];
    loaderImage?: string;
    preCache?: {
        route?: boolean | RegExp;
    };
}

interface RunOnConfig {
    idleTime: Function[];
}

interface LibConfig {
    afterUserInteraction?: Function[];
    runOn?: RunOnConfig;
}

interface TezAppOptions {
    components?: Record<string, () => Promise<{
        [key: string]: any;
    }>>;
    layouts?: Record<string, () => Promise<{
        [key: string]: any;
    }>>;
    pages?: Record<string, () => Promise<{
        [key: string]: any;
    }>>;
    useVue?: (vue: any) => void;
    autoRoutes?: {
        urls: {
            [key: string]: any;
        };
        re: {
            [key: string]: any;
        };
    };
    dynamicRoutes?: {
        [key: string]: any;
    };
    isDevMode?: boolean;
    loaderImagePath?: string;
    buildVersion?: number;
    maxPreComponentCount?: number;
    libConfig?: LibConfig;
    clientConfig: ClientConfig;
}

declare function createTezApp(tezAppOptions: TezAppOptions): void;

interface AfterInteractionConfig {
    scripts?: string[];
    preLoads?: {
        js: string[];
        css: string[];
    };
}

interface PayloadConfig {
    url: string;
    slots: {
        [key: string]: any;
    };
    masterPageSlots: {
        [key: string]: any;
    };
    layoutName: string;
    tags: {
        [key: string]: any;
    };
    postScript?: () => Promise<any>;
    isPage?: boolean;
}

interface TezPage {
    components: {
        [key: string]: DefineComponent;
    };
    masterPage: {
        [key: string]: DefineComponent;
    };
    payload: PayloadConfig;
    afterInteraction?: AfterInteractionConfig;
    postScript: () => Promise<any>;
}

declare function registerTezPage(page: TezPage): void;

declare const imageLoader: {
    resolve(url: string): Promise<string>;
    getImage(url: string): string;
    register(): void;
};

declare function addPreCacheAssets(): void;

export { addPreCacheAssets, createTezApp, imageLoader, registerTezPage };
